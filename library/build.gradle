rootProject.libraryModulePlugins.each {
    apply plugin: it
}

apply from: 'maven-push.gradle'

android {
    def ext = rootProject.extensions.ext
    compileSdkVersion ext.android.compileSdkVersion
    defaultConfig {
        minSdkVersion ext.android.minSdkVersion
        targetSdkVersion ext.android.targetSdkVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

jacoco {
    toolVersion = "0.7.9"
    reportsDir = file("$buildDir/reports")
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    // what to exclude from coverage report
    // UI, "noise", generated classes, platform classes, etc.
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Fragment.*',
            '**/*Activity.*'
    ]
    // generated classes
    classDirectories.setFrom(fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    ))

    // sources
    sourceDirectories.setFrom(files([
            android.sourceSets.main.java.srcDirs,
            "src/main/kotlin"
    ]))
    executionData.setFrom(files("$buildDir/jacoco/testDebugUnitTest.exec"))
}

dependencies {
    rootProject.libraryModuleDependencies.each {
        add(it.configuration, it.dependency, it.options)
    }
}

repositories {
    mavenCentral()
}
